{
  "files": [
    "certora/harness/scWETH.sol:scWETH",
    "lib/solmate/src/tokens/WETH.sol:WETH",
    "certora/mocks/AavePool.sol:AavePool",
    "certora/mocks/AToken.sol:AToken",
    "certora/mocks/VariableDebtToken.sol:VariableDebtToken",
    "certora/mocks/WstETH.sol:WstETH",
    "certora/mocks/StETH.sol:StETH",
    "certora/mocks/CurvePool.sol:CurvePool",
    "certora/mocks/AggregatorV3.sol:AggregatorV3",
    "certora/mocks/BalancerVault.sol:BalancerVault"
  ],
  "verify": [
    "scWETH:certora/specs/scWETH.spec"
  ],
  "solc": "solc",
  "link": [
    "AavePool:aToken=AToken",
    "AavePool:variableDebtToken=VariableDebtToken",
    "WstETH:stETH=StETH",
    "scWETH:asset=WETH",
    "scWETH:weth=WETH",
    "scWETH:wstETH=WstETH",
    "scWETH:stEth=StETH",
    "scWETH:aavePool=AavePool",
    "scWETH:aToken=AToken",
    "scWETH:variableDebtToken=VariableDebtToken",
    "scWETH:curvePool=CurvePool",
    "scWETH:stEThToEthPriceFeed=AggregatorV3",
    "scWETH:balancerVault=BalancerVault"
  ],
  "msg": "scWETH rules",
  "optimistic_loop": false,
  "multi_assert_check": false,
  "send_only": true,
  "smt_timeout": "3600",
  "disableLocalTypeChecking": false,
  "packages": [
    "solmate=lib/solmate/src",
    "openzeppelin-contracts=lib/openzeppelin-contracts/contracts",
    "aave-v3=lib/aave-v3-core/contracts"
  ],
  "optimisticFallback": true,
  "run_source": "VSCODE"
}